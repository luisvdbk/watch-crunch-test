Coding Test 2

This is a sample application. We do not need any kind of frontend code (JS, CSS) or any blade template writing. Only backend functionalities within Laravel are expected. Please don't spend time on creating view files, API token authorization etc. since we will not view this application in the browser. We will look at core logic and correctness only.

- You should follow SOLID, DRY, YAGNI methods and terms. 
- Use PHP 7.4, Laravel 8, model factory (legacy), faker etc. 
- Use PostgreSQL 12 as the database and Redis as the cache driver. 
- Please provide final .env file.

User model:

-- id (BigInt)
-- username (VarChar 31, Unique)
-- created_at (dateTime)
-- updated_at (dateTime)

Post model:

-- id (BigInt)
-- title (VarChar 255)
-- user_id (reference to user ID)
-- created_at (dateTime)
-- updated_at (dateTime)

Here are the model relations we need in the application:

# A Post must belong to a User
# A User can have many Posts

The problem to solve:

We have more than 10,000 users creating new posts every day. We need to know which users created more than 10 posts in the last 7 days. Write a script that will run against all users in the database and insert the following data into an array for each user that meets these requirements.

This is the array:

$topUsersData = [
	[
		'username' => 'user1',
		'created_posts_count' => 10,
		'last_post_title' => 'My Rolex watch today'
	],
	.................................
	.......................
];

For each item in this array provide these fields: 

- 'username' (the user's username) 
- 'created_posts_count' (total posts created by this user) 
- 'last_post_title' (the title of the last post created by the user)

Notes:

There are several ways to acheive this. Please take your time to find the optimal solution. Since there are many database records, we expect you to write an efficient script that will not overload the server's memory or cause slow downs. Ideally you do this in a queue job. 

Also, please write the script in a re-usable way so that it can be called from other application parts easily.

Good luck!